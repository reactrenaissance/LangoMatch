/* replace the whole thing

const goToWelcomeScreen = async () => {
if (!displayName || !profileImageUri || !location || bio.length < 20) {
            alert('Please make sure all fields are filled correctly and try again.');
            return;
        }
        const downloadURL = await uploadImage(profileImageUri); // Ensure this completes
        if (downloadURL) {
            await saveUserProfile();
            navigation.navigate('Welcome');
        } else {
            alert('Failed to upload image, please try again.');
        }
    };

// from the start of the default function 
useEffect(() => {
    (async () => {
        if (Platform.OS !== 'web') {
            const { status } = await ImagePicker.requestMediaLibraryPermissionsAsync();
            if (status !== 'granted') {
                alert('Sorry, we need camera roll permissions to make this work!');
            }
        }
    })();
}, []);

    const selectImage = async () => {
        setIsLoading(true);
        let result = await ImagePicker.launchImageLibraryAsync({
            mediaTypes: ImagePicker.MediaTypeOptions.Images,
            allowsEditing: true,
            aspect: [4, 3],
            quality: 1,
        });

        if (!result.canceled) {
            const uri = result.assets[0].uri;
            setProfileImageUri(uri);
            uploadImage(uri);
        } else {
            setIsLoading(false);
        }
    };

    const uploadImage = async (uri) => {
        if (!profileImageUri) return;
    setIsLoading(true);
        console.log("Auth UID:", auth.currentUser.uid);
        console.log("Storage Path:", `profile_images/${auth.currentUser.uid}/profile_pic`);

        const response = await fetch(uri);
        const blob = await response.blob();
        const storageRef = ref(storage, `profile_images/${auth.currentUser.uid}/profile_pic`);

        try {
            const snapshot = await uploadBytes(storageRef, blob);
            const downloadURL = await getDownloadURL(snapshot.ref);
            setProfileImageUri(downloadURL);
            console.log("Image uploaded and URL fetched:", downloadURL);
            return downloadURL;  // Return the URL for further use
        } catch (error) {
            console.error("Error uploading image:", error);
            alert("Failed to upload image.");
        } finally {
            setIsLoading(false);
        }
    };

    // put that back in setDoc part
    profileImageUri,
    bio,
    location

    // underneath upload your profile picture 
    <View style={styles.Button}>
    <Button  title="Select Photo" onPress={selectImage} />
    {isLoading ? (
        <ActivityIndicator size="large" color="#0000ff" />
    ) : (
    profileImageUri && 
        <Image source={{ uri: profileImageUri }} style={styles.profileImage} />
    )}
    </View> */